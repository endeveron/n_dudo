import React, { useState, useEffect } from 'react';

import { cn } from '@/core/utils/common';

const PIP_COLOR = '#09090b';
const WILD_PIP_COLOR = '#DA2B57';

export type DiceSize = 'sm' | 'md' | 'lg';

interface DiceProps {
  value: number;
  size?: DiceSize;
  className?: string;
  isRolling?: boolean;
  inputValue?: number;
  onClick?: (value: number) => void;
}

const DiceOne: React.FC<{ size: number }> = ({ size }) => (
  <svg
    width={size}
    height={size}
    viewBox="0 0 32 32"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
  >
    <circle cx="16" cy="16" r="7" fill={WILD_PIP_COLOR} />
    <path
      d="M29.2004 0C30.7459 0 32 1.2529 32 2.79963V29.2004C31.9999 30.7459 30.7471 32 29.2004 32H2.79963C1.25422 31.9999 6.22846e-05 30.747 0 29.2004V2.79963C2.13454e-06 1.25415 1.25301 0.000139947 2.79963 0H29.2004ZM16.0303 10.4366C12.9405 10.4367 10.4358 12.9414 10.4357 16.0313C10.4357 19.1211 12.9405 21.6258 16.0303 21.6259C19.1203 21.6259 21.625 19.1212 21.625 16.0313C21.6249 12.9414 19.1202 10.4366 16.0303 10.4366Z"
      fill="currentColor"
    />
  </svg>
);

const DiceTwo: React.FC<{ size: number }> = ({ size }) => (
  <svg
    width={size}
    height={size}
    viewBox="0 0 32 32"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
  >
    <path
      d="M29.2003 1H2.79974C1.25301 1 1 1.25417 1 2.79974V29.2003C1 30.747 1.25417 31 2.79974 31H29.2003C30.747 31 31 30.7458 31 29.2003V2.79974C31 1.253 30.7458 1 29.2003 1Z"
      fill={PIP_COLOR}
    />
    <path
      d="M29.2003 0H2.79974C1.25301 0 0 1.25417 0 2.79974V29.2003C0 30.747 1.25417 32 2.79974 32H29.2003C30.747 32 32 30.7458 32 29.2003V2.79974C32 1.253 30.7458 0 29.2003 0ZM6.25453 29.3833C4.24623 29.3833 2.61791 27.7549 2.61791 25.7466C2.61791 23.7383 4.24623 22.11 6.25453 22.11C8.26284 22.11 9.89116 23.7383 9.89116 25.7466C9.89116 27.7549 8.26284 29.3833 6.25453 29.3833ZM25.7455 9.89116C23.7372 9.89116 22.1088 8.26284 22.1088 6.25453C22.1088 4.24623 23.7372 2.61791 25.7455 2.61791C27.7538 2.61791 29.3821 4.24623 29.3821 6.25453C29.3821 8.26284 27.7538 9.89116 25.7455 9.89116Z"
      fill="currentColor"
    />
  </svg>
);

const DiceThree: React.FC<{ size: number }> = ({ size }) => (
  <svg
    width={size}
    height={size}
    viewBox="0 0 32 32"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
  >
    <path
      d="M29.2003 1H2.79974C1.25301 1 1 1.25417 1 2.79974V29.2003C1 30.747 1.25417 31 2.79974 31H29.2003C30.747 31 31 30.7458 31 29.2003V2.79974C31 1.253 30.7458 1 29.2003 1Z"
      fill={PIP_COLOR}
    />
    <path
      d="M29.2003 0H2.79974C1.25301 0 0 1.25417 0 2.79974V29.2003C0 30.747 1.25417 32 2.79974 32H29.2003C30.747 32 32 30.7458 32 29.2003V2.79974C32 1.253 30.7458 0 29.2003 0ZM6.25453 29.3833C4.24623 29.3833 2.61791 27.7549 2.61791 25.7466C2.61791 23.7383 4.24623 22.11 6.25453 22.11C8.26284 22.11 9.89116 23.7383 9.89116 25.7466C9.89116 27.7549 8.26284 29.3833 6.25453 29.3833ZM16 19.6366C13.9917 19.6366 12.3634 18.0083 12.3634 16C12.3634 13.9917 13.9917 12.3634 16 12.3634C18.0083 12.3634 19.6366 13.9917 19.6366 16C19.6366 18.0083 18.0083 19.6366 16 19.6366ZM25.7455 9.89116C23.7372 9.89116 22.1088 8.26284 22.1088 6.25453C22.1088 4.24623 23.7372 2.61791 25.7455 2.61791C27.7538 2.61791 29.3821 4.24623 29.3821 6.25453C29.3821 8.26284 27.7538 9.89116 25.7455 9.89116Z"
      fill="currentColor"
    />
  </svg>
);

const DiceFour: React.FC<{ size: number }> = ({ size }) => (
  <svg
    width={size}
    height={size}
    viewBox="0 0 32 32"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
  >
    <path
      d="M29.2003 1H2.79974C1.25301 1 1 1.25417 1 2.79974V29.2003C1 30.747 1.25417 31 2.79974 31H29.2003C30.747 31 31 30.7458 31 29.2003V2.79974C31 1.253 30.7458 1 29.2003 1Z"
      fill={PIP_COLOR}
    />
    <path
      d="M29.2003 0H2.79974C1.25301 0 0 1.25417 0 2.79974V29.2003C0 30.747 1.25417 32 2.79974 32H29.2003C30.747 32 32 30.7458 32 29.2003V2.79974C32 1.253 30.7458 0 29.2003 0ZM6.25453 29.3833C4.24623 29.3833 2.61791 27.7549 2.61791 25.7466C2.61791 23.7383 4.24623 22.11 6.25453 22.11C8.26284 22.11 9.89116 23.7383 9.89116 25.7466C9.89116 27.7549 8.26284 29.3833 6.25453 29.3833ZM6.25453 9.89116C4.24623 9.89116 2.61791 8.26284 2.61791 6.25453C2.61791 4.24623 4.24623 2.61791 6.25453 2.61791C8.26284 2.61791 9.89116 4.24623 9.89116 6.25453C9.89116 8.26284 8.26284 9.89116 6.25453 9.89116ZM25.7455 29.3833C23.7372 29.3833 22.1088 27.7549 22.1088 25.7466C22.1088 23.7383 23.7372 22.11 25.7455 22.11C27.7538 22.11 29.3821 23.7383 29.3821 25.7466C29.3821 27.7549 27.7538 29.3833 25.7455 29.3833ZM25.7455 9.89116C23.7372 9.89116 22.1088 8.26284 22.1088 6.25453C22.1088 4.24623 23.7372 2.61791 25.7455 2.61791C27.7538 2.61791 29.3821 4.24623 29.3821 6.25453C29.3821 8.26284 27.7538 9.89116 25.7455 9.89116Z"
      fill="currentColor"
    />
  </svg>
);

const DiceFive: React.FC<{ size: number }> = ({ size }) => (
  <svg
    width={size}
    height={size}
    viewBox="0 0 32 32"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
  >
    <path
      d="M29.2003 1H2.79974C1.25301 1 1 1.25417 1 2.79974V29.2003C1 30.747 1.25417 31 2.79974 31H29.2003C30.747 31 31 30.7458 31 29.2003V2.79974C31 1.253 30.7458 1 29.2003 1Z"
      fill={PIP_COLOR}
    />
    <path
      d="M29.2003 0H2.79974C1.25301 0 0 1.25417 0 2.79974V29.2003C0 30.747 1.25417 32 2.79974 32H29.2003C30.747 32 32 30.7458 32 29.2003V2.79974C32 1.253 30.7458 0 29.2003 0ZM6.25453 29.3833C4.24623 29.3833 2.61791 27.7549 2.61791 25.7466C2.61791 23.7383 4.24623 22.11 6.25453 22.11C8.26284 22.11 9.89116 23.7383 9.89116 25.7466C9.89116 27.7549 8.26284 29.3833 6.25453 29.3833ZM6.25453 9.89116C4.24623 9.89116 2.61791 8.26284 2.61791 6.25453C2.61791 4.24623 4.24623 2.61791 6.25453 2.61791C8.26284 2.61791 9.89116 4.24623 9.89116 6.25453C9.89116 8.26284 8.26284 9.89116 6.25453 9.89116ZM16 19.6366C13.9917 19.6366 12.3634 18.0083 12.3634 16C12.3634 13.9917 13.9917 12.3634 16 12.3634C18.0083 12.3634 19.6366 13.9917 19.6366 16C19.6366 18.0083 18.0083 19.6366 16 19.6366ZM25.7455 29.3833C23.7372 29.3833 22.1088 27.7549 22.1088 25.7466C22.1088 23.7383 23.7372 22.11 25.7455 22.11C27.7538 22.11 29.3821 23.7383 29.3821 25.7466C29.3821 27.7549 27.7538 29.3833 25.7455 29.3833ZM25.7455 9.89116C23.7372 9.89116 22.1088 8.26284 22.1088 6.25453C22.1088 4.24623 23.7372 2.61791 25.7455 2.61791C27.7538 2.61791 29.3821 4.24623 29.3821 6.25453C29.3821 8.26284 27.7538 9.89116 25.7455 9.89116Z"
      fill="currentColor"
    />
  </svg>
);

const DiceSix: React.FC<{ size: number }> = ({ size }) => (
  <svg
    width={size}
    height={size}
    viewBox="0 0 32 32"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
  >
    <path
      d="M29.2003 1H2.79974C1.25301 1 1 1.25417 1 2.79974V29.2003C1 30.747 1.25417 31 2.79974 31H29.2003C30.747 31 31 30.7458 31 29.2003V2.79974C31 1.253 30.7458 1 29.2003 1Z"
      fill={PIP_COLOR}
    />
    <path
      d="M29.2003 0H2.79974C1.25301 0 0 1.25417 0 2.79974V29.2003C0 30.747 1.25417 32 2.79974 32H29.2003C30.747 32 32 30.7458 32 29.2003V2.79974C32 1.253 30.7458 0 29.2003 0ZM25.7455 2.61791C27.7538 2.61791 29.3821 4.24623 29.3821 6.25453C29.3821 8.26284 27.7538 9.89116 25.7455 9.89116C23.7372 9.89116 22.1088 8.26284 22.1088 6.25453C22.1088 4.24623 23.7372 2.61791 25.7455 2.61791ZM6.25453 2.61791C8.26284 2.61791 9.89116 4.24623 9.89116 6.25453C9.89116 8.26284 8.26284 9.89116 6.25453 9.89116C4.24623 9.89116 2.61791 8.26284 2.61791 6.25453C2.61791 4.24623 4.24623 2.61791 6.25453 2.61791ZM6.25453 29.3833C4.24623 29.3833 2.61791 27.7549 2.61791 25.7466C2.61791 23.7383 4.24623 22.11 6.25453 22.11C8.26284 22.11 9.89116 23.7383 9.89116 25.7466C9.89116 27.7549 8.26284 29.3833 6.25453 29.3833ZM6.25453 19.6366C4.24623 19.6366 2.61791 18.0083 2.61791 16C2.61791 13.9917 4.24623 12.3634 6.25453 12.3634C8.26284 12.3634 9.89116 13.9917 9.89116 16C9.89116 18.0083 8.26284 19.6366 6.25453 19.6366ZM25.7455 29.3833C23.7372 29.3833 22.1088 27.7549 22.1088 25.7466C22.1088 23.7383 23.7372 22.11 25.7455 22.11C27.7538 22.11 29.3821 23.7383 29.3821 25.7466C29.3821 27.7549 27.7538 29.3833 25.7455 29.3833ZM25.7455 19.6366C23.7372 19.6366 22.1088 18.0083 22.1088 16C22.1088 13.9917 23.7372 12.3634 25.7455 12.3634C27.7538 12.3634 29.3821 13.9917 29.3821 16C29.3821 18.0083 27.7538 19.6366 25.7455 19.6366Z"
      fill="currentColor"
    />
  </svg>
);

const DICE_COMPONENTS: Record<number, React.ComponentType<{ size: number }>> = {
  1: DiceOne,
  2: DiceTwo,
  3: DiceThree,
  4: DiceFour,
  5: DiceFive,
  6: DiceSix,
};

const ROLLING_ANIMATION_DURATION = 1000;
const ROLL_INTERVAL = 100; // Change face every 100ms

const Dice: React.FC<DiceProps> = ({
  value,
  size = 'lg',
  className,
  isRolling = false,
  inputValue,
  onClick,
}) => {
  const [currentValue, setCurrentValue] = useState<number>(value);
  const [rolling, setRolling] = useState<boolean>(false);

  let svgSize: number;
  switch (size) {
    case 'sm':
      svgSize = 16;
      break;
    case 'md':
      svgSize = 24;
      break;
    default:
      svgSize = 32;
  }

  const handleClick = () => {
    if (onClick) onClick(value);
  };

  useEffect(() => {
    if (isRolling) {
      setRolling(true);

      // Start the rolling animation
      const rollInterval = setInterval(() => {
        setCurrentValue(Math.floor(Math.random() * 6) + 1);
      }, ROLL_INTERVAL);

      // Stop rolling after the specified duration
      const rollTimeout = setTimeout(() => {
        clearInterval(rollInterval);
        setCurrentValue(value);
        setRolling(false);
      }, ROLLING_ANIMATION_DURATION);

      return () => {
        clearInterval(rollInterval);
        clearTimeout(rollTimeout);
      };
    } else {
      setCurrentValue(value);
      setRolling(false);
    }
  }, [isRolling, value]);

  const DiceComponent = DICE_COMPONENTS[currentValue];

  if (!DiceComponent) {
    throw new Error(
      `Invalid dice value: ${currentValue}. Value must be between 1 and 6.`
    );
  }

  return (
    <div
      onClick={handleClick}
      className={cn(
        'transition-all duration-100',
        !!onClick && 'cursor-pointer',
        rolling && 'opacity-50',
        inputValue && inputValue !== value && 'opacity-30',
        inputValue && 'hover:opacity-100',
        className
      )}
    >
      <div
        className={cn(
          'text-dice',
          size === 'lg' && 'shadow-lg',
          size === 'md' && 'shadow-md',
          size === 'sm' && 'shadow-sm'
        )}
      >
        <DiceComponent size={svgSize} />
      </div>
    </div>
  );
};

export default Dice;
